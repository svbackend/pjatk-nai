"Solving Knapsack Problem with Brute Force"

HOMEWORK

Data: take your number from NAI.xlsx and use to find a case from the file: knapsack_data.txt

INPUT: 
knapsack capacity (integer) 
string of values (integers) of n items,
string of sizes (integers) of n items

(it can be read from a file, or just to paste into your code as array initialization)

OUTPUT: characteristic vector representing the optimal subset of items selected for the backpack
(printed on the console)

Characteristic vector: contains of n bit, i-bit is switched on then and only then
when we take the i-th item

Idea: 
Generate all n-bit characteristic vectors in a loop
(e.g. as binary representations of numbers from 0 to sqr(2)-1), 
for each vector (on the fly) check if it's feasible (acceptable), if so
compare the value with the greatest value found so far. 
Finally, return the one for which it was maximal. 
Do not remember all vectors.

It's good for the program to write some information on a regular basis (e.g. how many iterations,
the best value so far, etc.)
